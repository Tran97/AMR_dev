<launch>
  <arg name="model_name" />
  <arg name="uuv_name" default="$(arg model_name)"/>
  <!--Thruster manager configuration  -->
  <arg name="thruster_manager_output_dir" default="$(find bluerov2_control)/config"/>
  <arg name="thruster_manager_config_file" default="$(find bluerov2_control)/config/thruster_manager.yaml"/>
  <!-- File containing the thruster allocation matrix -->
  <arg name="tam_file" default="$(find bluerov2_control)/config/TAM.yaml"/>

  <!-- Start the thruster allocation manager -->
  <include file="$(find uuv_thruster_manager)/launch/thruster_manager.launch">
     <arg name="uuv_name" value="$(arg uuv_name)" />
     <arg name="model_name" value="$(arg model_name)" />
     <arg name="output_dir" value="$(arg thruster_manager_output_dir)" />
     <arg name="config_file" value="$(arg thruster_manager_config_file)" />
     <arg name="tam_file" value="$(arg tam_file)" />
   </include>
   
  <group ns="$(arg uuv_name)">
    <rosparam file="$(find bluerov2_control)/config/controllers/cascade/inertial.yaml" command="load"/>
    <rosparam file="$(find bluerov2_control)/config/controllers/cascade/vel_pid_control.yaml" command="load"/>
    <rosparam file="$(find ts4_pid_tuning)/config/pos_pid_control.yaml" command="load"/>

    <node pkg="uuv_control_cascaded_pid" type="AccelerationControl.py" name="acceleration_control"
          output="screen">
      <param name="tf_prefix" type="string" value="$(arg uuv_name)/" />
    </node>

    <node pkg="uuv_control_cascaded_pid" type="VelocityControl.py" name="velocity_control"
          output="screen">
      <remap from="odom" to="/$(arg uuv_name)/pose_gt"/>
      <remap from="cmd_accel" to="/$(arg uuv_name)/cmd_accel"/>
    </node>

    <node pkg="uuv_control_cascaded_pid" type="PositionControl.py" name="position_control"
          output="screen">
      <remap from="odom" to="/$(arg uuv_name)/pose_gt"/>
    </node>
  </group>
</launch>
